@use "sass:map";

/// Define Kit
/// @param {String} $name - Kit name
@mixin kit-set($name) {
  .kit\:#{ $name } {
    @content;
  }
}

/// Define Kit Combo
/// @param {String} $name - Kit name
@mixin kit-combo($name) {
  &.kit\:#{ $name } {
    @content;
  }
}

/// Extends from Kit:Child
/// @param {String} $name - Kit name
@mixin kit-extend($name) {
  @extend .kit\:#{ $name };
}

/// Extends from Kit:Child
/// @param {String} $name - Kit name
@mixin kit-extend-optional($name) {
  @extend .kit\:#{ $name } !optional;
}

/// Extends from Kit:Child
/// @param {String} $name - Kit name
/// @param {String} $child - Child name
@mixin kit-extends($name, $child) {
  @extend .#{ $name }#{ $child };
}

/// Extends from Kit:Child
/// @param {String} $name - Kit name
/// @param {String} $child - Child name
@mixin kit-extends-optional($name, $child) {
  @extend .#{ $name }#{ $child } !optional;
}

/// Define Kit child
/// @param {String} $name - Kit name
/// @param {String} $child - Child name
@mixin kit-child($name, $child) {
  .#{ $name }\:#{ $child } {
    @content;
  }
}

/// Define Kit direct child
/// @param {String} $name - Kit name
/// @param {String} $child - Child name
@mixin kit-legacy($name, $child) {
  & > *.#{ $name }\:#{ $child } {
    @content;
  }
}

/// Define Kit child
/// @param {String} $name - Kit name
/// @param {String} $child - Child name
@mixin kit-variant($name, $child) {
  &.#{ $name }\:#{ $child } {
    @content;
  }
}

/// Define Kit child
/// @param {String} $ns - Kit name
/// @param {String} $kit - Child name
@mixin kit-namespace($ns, $kit) {
  .#{ $ns }\:\:#{ $kit } {
    @content;
  }
}

/// Define Kit child
/// @param {String} $ns - Kit name
/// @param {String} $kit - Child name
@mixin kit-namespace-variant($ns, $kit) {
  &.#{ $ns }\:\:#{ $kit } {
    @content;
  }
}

/// If kit is used
/// @param {String} $name - Kit name
@mixin kit-used($name) {
  [class^="#{ $name }:"],
  [class*=" #{ $name }:"] {
    @content;
  }
}

/// If kit is used
/// @param {String} $name - Kit name
@mixin kit-used-variant($name) {
  &[class^="#{ $name }:"],
  &[class*=" #{ $name }:"] {
    @content;
  }
}

/// Kit child declaration contains
/// @param {String} $name - Kit name
/// @param {String} $child - Child name
@mixin kit-contains($name, $child) {
  [class~="#{ $name }:#{ $child }"] {
    @content;
  }
}

/// Kit child declaration contains
/// @param {String} $name - Kit name
/// @param {String} $child - Child name
@mixin kit-contains-variant($name, $child) {
  &[class~="#{ $name }:#{ $child }"] {
    @content;
  }
}

/// Kit child declaration sensitive
/// @param {String} $name - Kit name
/// @param {String} $child - Child name
@mixin kit-sensitive($name, $child) {
  [class|="#{ $name }:#{ $child }"] {
    @content;
  }
}

/// Kit child declaration sensitive
/// @param {String} $name - Kit name
/// @param {String} $child - Child name
@mixin kit-sensitive-variant($name, $child) {
  &[class|="#{ $name }:#{ $child }"] {
    @content;
  }
}

/// Kit child declaration start with
/// @param {String} $name - Kit name
/// @param {String} $child - Child name
@mixin kit-start-with($name, $child) {
  [class^="#{ $name }:#{ $child }"] {
    @content;
  }
}

/// Kit child declaration start with
/// @param {String} $name - Kit name
/// @param {String} $child - Child name
@mixin kit-start-with-variant($name, $child) {
  &[class^="#{ $name }:#{ $child }"] {
    @content;
  }
}

/// Kit child declaration end with
/// @param {String} $name - Kit name
/// @param {String} $child - Child name
@mixin kit-end-with($name, $child) {
  [class$="#{ $name }\:#{ $child }"] {
    @content;
  }
}

/// Kit child declaration end with
/// @param {String} $name - Kit name
/// @param {String} $child - Child name
@mixin kit-end-with-variant($name, $child) {
  &[class$="#{ $name }\:#{ $child }"] {
    @content;
  }
}

/// Kit child declaration match with element class name
/// @param {String} $name - Kit name
/// @param {String} $child - Child name
@mixin kit-match($name, $child) {
  [class*="#{ $name }\:#{ $child }"] {
    @content;
  }
}

/// Kit child declaration match with element class name
/// @param {String} $name - Kit name
/// @param {String} $child - Child name
@mixin kit-match-variant($name, $child) {
  &[class*="#{ $name }\:#{ $child }"] {
    @content;
  }
}

@mixin kit-clock($ns, $name, $property, $value) {
  .#{$ns}\:#{$name} {
    #{$property}: #{$value};
  }

  .#{$ns}-x\:#{$name} {
    #{$property}-horizontal: #{$value};
  }

  .#{$ns}-y\:#{$name} {
    #{$property}-vertical: #{$value};
  }

  .#{$ns}-t\:#{$name} {
    #{$property}-top: #{$value};
  }

  .#{$ns}-r\:#{$name} {
    #{$property}-right: #{$value};
  }

  .#{$ns}-b\:#{$name} {
    #{$property}-bottom: #{$value};
  }

  .#{$ns}-l\:#{$name} {
    #{$property}-left: #{$value};
  }
}

@mixin kit-clock-variant($ns, $name, $property, $value) {
  &.#{$ns}\:#{$name} {
    #{$property}: #{$value};
  }

  &.#{$ns}-x\:#{$name} {
    #{$property}-horizontal: #{$value};
  }

  &.#{$ns}-y\:#{$name} {
    #{$property}-vertical: #{$value};
  }

  &.#{$ns}-t\:#{$name} {
    #{$property}-top: #{$value};
  }

  &.#{$ns}-r\:#{$name} {
    #{$property}-right: #{$value};
  }

  &.#{$ns}-b\:#{$name} {
    #{$property}-bottom: #{$value};
  }

  &.#{$ns}-l\:#{$name} {
    #{$property}-left: #{$value};
  }
}

@mixin kit-responsive-clock(
  $ns,
  $name,
  $property,
  $value,
  $screens: null,
  $only: false
) {
  @include kit-responsive("#{$ns}", $name, $screens, $only) {
    #{$property}: #{$value};
  }

  @include kit-responsive("#{$ns}", "unset", $screens, $only) {
    #{$property}: unset;
  }

  @include kit-responsive("#{$ns}-x", $name, $screens, $only) {
    #{$property}-horizontal: #{$value};
  }

  @include kit-responsive("#{$ns}-x", "unset", $screens, $only) {
    #{$property}-horizontal: unset;
  }

  @include kit-responsive("#{$ns}-y", $name, $screens, $only) {
    #{$property}-vertical: #{$value};
  }

  @include kit-responsive("#{$ns}-y", "unset", $screens, $only) {
    #{$property}-vertical: unset;
  }

  @include kit-responsive("#{$ns}-t", $name, $screens, $only) {
    #{$property}-top: #{$value};
  }

  @include kit-responsive("#{$ns}-t", "unset", $screens, $only) {
    #{$property}-top: unset;
  }

  @include kit-responsive("#{$ns}-r", $name, $screens, $only) {
    #{$property}-right: #{$value};
  }

  @include kit-responsive("#{$ns}-r", "unset", $screens, $only) {
    #{$property}-right: unset;
  }

  @include kit-responsive("#{$ns}-b", $name, $screens, $only) {
    #{$property}-bottom: #{$value};
  }

  @include kit-responsive("#{$ns}-b", "unset", $screens, $only) {
    #{$property}-bottom: unset;
  }

  @include kit-responsive("#{$ns}-l", $name, $screens, $only) {
    #{$property}-left: #{$value};
  }

  @include kit-responsive("#{$ns}-l", "unset", $screens, $only) {
    #{$property}-left: unset;
  }
}
